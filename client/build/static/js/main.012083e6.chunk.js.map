{"version":3,"sources":["Component/BoltViewCard.jsx","Component/BoltView.jsx","Component/ButtonView.jsx","Component/Grid.jsx","Component/GridView.jsx","App.js","reportWebVitals.js","index.js"],"names":["BoltViewCard","props","className","style","backgroundColor","onClick","setCursor","id","position","x","toString","y","BoltView","bolts","map","element","ButtonView","onReset","a","eraseBoltsFromGrid","boltsInGrid","index","util","fetch","apiLink","array","grids","setTimeout","color","Grid","React","useState","item","substring","setColor","useEffect","cursor","changeGrid","GridView","setMaze","layoutSize","Math","floor","App","setGrids","setBolts","response","json","maze","i","length","j","push","getMaze","param","bolt","next_move","boltId","hasOwnProperty","path","getBolts","controls","src","type","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.012083e6.chunk.js","sourcesContent":["import './BoltViewCard.css';\r\n\r\nconst BoltViewCard = props => (\r\n    <div\r\n        key={props.id}\r\n        className='bolt'\r\n        style={{ backgroundColor: '#009ddb' }}\r\n        onClick={() => {\r\n            props.setCursor(props.id);\r\n        }}\r\n    >\r\n        <h3>\r\n            ID: {props.id}, POS:\r\n            {props.position.x.toString() + props.position.y.toString()}\r\n        </h3>\r\n    </div>\r\n);\r\nexport default BoltViewCard;\r\n","import BoltViewCard from './BoltViewCard';\r\nimport './BoltView.css';\r\n\r\nconst BoltView = props => {\r\n    return (\r\n        <div className='bolt-div' onClick={props.onClick}>\r\n            {props.bolts.map(element => (\r\n                <BoltViewCard\r\n                    key={element.id}\r\n                    id={element.id}\r\n                    position={element.position}\r\n                    setCursor={props.setCursor}\r\n                />\r\n            ))}\r\n        </div>\r\n    );\r\n};\r\nexport default BoltView;\r\n","import { apiLink } from '..';\r\nimport './ButtonView.css';\r\n\r\nconst ButtonView = props => {\r\n    const onReset = async () => {\r\n        const eraseBoltsFromGrid = boltsInGrid => {\r\n            boltsInGrid.map((element, index) => {\r\n                if (element.util === '#009ddb') {\r\n                    boltsInGrid[index].util = '#C8EFF9';\r\n                }\r\n            });\r\n        };\r\n        fetch(`${apiLink}reset`);\r\n        const array = props.grids;\r\n        setTimeout(() => {\r\n            // erase bolts after 0.1s\r\n            eraseBoltsFromGrid(array);\r\n        }, 100);\r\n        // check if all bolts are really reset\r\n        setTimeout(() => {\r\n            eraseBoltsFromGrid(array);\r\n        }, 5000);\r\n    };\r\n    return (\r\n        <div className='button-div'>\r\n            <div\r\n                className='button'\r\n                style={{ backgroundColor: '#C8EFF9' }}\r\n                onClick={() => props.setCursor('#C8EFF9')}\r\n            >\r\n                <h2 style={{ color: 'grey' }}>Beschikbaar</h2>\r\n            </div>\r\n            <div\r\n                className='button'\r\n                style={{ backgroundColor: '#e71d07' }}\r\n                onClick={() => props.setCursor('#e71d07')}\r\n            >\r\n                <h2>Obstakel</h2>\r\n            </div>\r\n            <div className='button' style={{ backgroundColor: '#fcd200' }}>\r\n                <h2>Route</h2>\r\n            </div>\r\n            <div className='button' style={{ backgroundColor: '#009ddb' }}>\r\n                <h2>Positie</h2>\r\n            </div>\r\n\r\n            <div\r\n                className='button'\r\n                style={{ backgroundColor: '#42b132' }}\r\n                onClick={() => props.setCursor('#42b132')}>\r\n                <h2>Doel</h2>\r\n            </div>\r\n            <div\r\n                className='button'\r\n                style={{ backgroundColor: '#fc9803' }}\r\n                onClick={() => onReset()}\r\n            >\r\n                <h2>Reset BOLTs</h2>\r\n            </div>\r\n            <div\r\n                className='button'\r\n                style={{ backgroundColor: '#b103fc' }}\r\n                onClick={() => {\r\n                    // sends all connected BOLTs home\r\n                    fetch(`${apiLink}home`);\r\n                }}\r\n            >\r\n                <h2>Thuisfront</h2>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default ButtonView;\r\n","import React from 'react';\r\nimport './Grid.css';\r\n\r\nconst Grid = props => {\r\n    const [color, setColor] = React.useState(\r\n        props.item.util.substring(0, 7)\r\n    );\r\n    React.useEffect(() => {\r\n        setColor(props.item.util.substring(0, 7));\r\n        // if color changes, re-render\r\n    }, [props.item.util]);\r\n    const onChangeGrid = () => {\r\n        if (props.cursor !== color) {\r\n            props.changeGrid();\r\n        }\r\n    };\r\n    return (\r\n        <div\r\n            className='grid-item'\r\n            style={{ backgroundColor: color }}\r\n            onClick={() => {\r\n                // this is needed\r\n                setColor(props.cursor);\r\n                onChangeGrid();\r\n            }}\r\n        >\r\n            {props.item.index}\r\n        </div>\r\n    );\r\n};\r\nexport default Grid;\r\n","import { layoutSize } from '..';\r\nimport Grid from './Grid';\r\nimport './GridView.css';\r\n\r\nconst GridView = props => {\r\n    const changeGrid = item => {\r\n        // calculate x and y based on grid position\r\n        // x and y are flipped because api contains an error\r\n        props.setMaze(\r\n            props.grids[item].index % layoutSize,\r\n            Math.floor(props.grids[item].index / layoutSize));\r\n    };\r\n    return (\r\n        <div className='box-map'>\r\n            <div className='grid-container'>\r\n                {props.grids.map((element, index) => (\r\n                    <Grid\r\n                        item={element}\r\n                        key={props.grids[index].index}\r\n                        changeGrid={() => changeGrid(index)}\r\n                        cursor={props.cursor}\r\n                    />\r\n                ))}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\nexport default GridView;\r\n","import React from 'react';\r\nimport { apiLink, layoutSize } from '.';\r\nimport './App.css';\r\nimport BoltView from './Component/BoltView';\r\nimport ButtonView from './Component/ButtonView';\r\nimport GridView from './Component/GridView';\r\nconst App = props => {\r\n  const [cursor, setCursor] = React.useState('#C8EFF9');\r\n  const [grids, setGrids] = React.useState([]);\r\n  const [bolts, setBolts] = React.useState([]);\r\n  React.useEffect(() => {\r\n    const getMaze = async () => {\r\n      const response = await fetch(apiLink + 'maze');\r\n      const json = await response.json();\r\n      // JSON is object with property 'maze'\r\n      const maze = json.maze;\r\n      const array = [];\r\n      for (let i = 0; i < maze.length; i++) {\r\n        for (let j = 0; j < maze[i].length; j++) {\r\n          array.push({\r\n            index: i * layoutSize + j,\r\n            util:\r\n              maze[i][j] === 0\r\n                //available\r\n                ? '#C8EFF9'\r\n                //obstacle\r\n                : '#e71d07'\r\n          });\r\n        }\r\n      }\r\n      setGrids(array);\r\n    };\r\n    getMaze();\r\n    // remove brackets if you want to loop request the server\r\n  }, []);\r\n  const setMaze = async (x, y) => {\r\n    if (typeof cursor === 'string') {\r\n      if (cursor === '#42b132') {\r\n        await fetch(`${apiLink}nest/${y.toString()}${x.toString()}`);\r\n      } else {\r\n        // handles toggle of grid by x and y\r\n        const param = `'?x=${x}&y=${y}&v=${(cursor === '#C8EFF9' ? '0' : '1')}`;\r\n        await fetch(`${apiLink}maze${param}`);\r\n      }\r\n    } else {\r\n      const bolt = `bolt/${cursor}`;\r\n      const param = `?x=${y}&y=${x}`;\r\n      await fetch(`${apiLink}${bolt}/goto${param}`);\r\n    }\r\n  };\r\n  React.useEffect(() => {\r\n    const getBolts = async () => {\r\n      const response = await fetch(`${apiLink}bolt`);\r\n      const json = await response.json();\r\n      setBolts(await json);\r\n      const array = grids;\r\n      if (bolts.length > 0) {\r\n        bolts.map((element, index) => {\r\n          // when goal is reached\r\n          if (\r\n            (element.next_move.x * layoutSize + element.next_move.y ===\r\n              element.position.x * layoutSize + element.position.y) &&\r\n            (array[element.next_move.x * layoutSize + element.next_move.y]\r\n              .util !== '#009ddb')\r\n          ) {\r\n            array[element.position.x * layoutSize + element.position.y].util =\r\n              // overrides\r\n              '#009ddb';\r\n            array.map(element => {\r\n              if (element.util === '#fcd200' + bolts[index].id) {\r\n                // erases route of specific bolt\r\n                element.util = '#C8EFF9';\r\n              }\r\n            });\r\n          } else {\r\n            // goal hasn't been reached\r\n            if (\r\n              array[element.next_move.x * layoutSize + element.next_move.y]\r\n                .util !== '#42b132'\r\n            ) {\r\n              array[\r\n                element.next_move.x * layoutSize + element.next_move.y\r\n              ].util = '#42b132';\r\n            }\r\n            (async () => {\r\n              const boltId = element.id;\r\n              const response = await fetch(\r\n                `${apiLink}bolt/${element.id}/path`\r\n              );\r\n              const json = await response.json();\r\n              if (await json.hasOwnProperty('path')) {\r\n                json.path.map(element => {\r\n                  if (\r\n                    array[element[0] * layoutSize + element[1]].util !==\r\n                    '#fcd200' + boltId\r\n                  ) {\r\n                    array[element[0] * layoutSize + element[1]].util =\r\n                      '#fcd200' + boltId;\r\n                  }\r\n                });\r\n              }\r\n            })();\r\n          }\r\n        });\r\n        setGrids(array);\r\n      }\r\n    };\r\n    if (grids !== []) {\r\n      getBolts();\r\n    }\r\n    // should work (json.map function is een onderkruipsel)\r\n  });\r\n  return (\r\n    <div className='app-container'>\r\n      {/* <link rel=\"stylesheet\" href=\"static/stylesheet.css\" /> */}\r\n      <audio controls>\r\n        <source\r\n          src='https://vgmsite.com/soundtracks/super-mario-64-soundtrack/zqtpbfkskm/06%20Slider.mp3'\r\n          type='audio/mpeg'\r\n        />\r\n      </audio>\r\n      <div className='container'>\r\n        <div className='side-container'>\r\n          <ButtonView setCursor={setCursor} grids={grids} />\r\n        </div>\r\n        {grids !== [] ? (\r\n          <GridView cursor={cursor} grids={grids} setMaze={setMaze} />\r\n        ) : null}\r\n        {bolts !== [] ? (\r\n          <BoltView setCursor={setCursor} bolts={bolts} />\r\n        ) : null}\r\n      </div>\r\n      <div className='title-view'>\r\n        <img\r\n          src='https://fontmeme.com/permalink/211007/ee6670dba76f4367bd3d070b9a3cb143.png'\r\n          alt='super-mario-lettertype'\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\nexport const apiLink = 'https://rollenbollen.azurewebsites.net/api/';\r\nexport const layoutSize = 10;\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}